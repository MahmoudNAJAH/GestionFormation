@model GestionFormation.DTO.UserForChatDTO
@{
    ViewBag.Title = "Chat";
}

<h2>Chat</h2>
@if (Model.ListeDesSalons == null || Model.ListeDesSalons.Count() == 0)
{
    <p>Vous n'est inscrit à aucune formation! Le chat ne vous est pas accessible...</p>
}
else {

if (Model.SalonSelectionne == null)
{
    using (Html.BeginForm("ShowChat", "Apprenant", FormMethod.Post))
    {

        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            <div>
                <h1>Se connecter au chat :</h1>
                @Html.EditorFor(model => model.Prenom_N_, new { htmlAttributes = new { @class = "form-control, hidden" } })
                @Html.EditorFor(model => model.Id, new { htmlAttributes = new { @class = "form-control, hidden" } })

                <input type="hidden" id="displayname" value="@Model.Prenom_N_" />
                <input type="hidden" id="senderId" value=@Model.Id />
                <input type="hidden" id="salonId" value=@Model.SalonSelectionne />
                <div class="form-group">
                    @Html.LabelFor(model => model.SalonSelectionne, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(x => Model.SalonSelectionne, new SelectList(Model.ListeDesSalons, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "group" })

                    </div>
                </div>
                <input type="submit" value="connexion" class="btn btn-default" />
            </div>
        </div>
    }
}
else
{
    <div class="container">
        <input type="text" id="message" class="form-control"/>
        <input type="button" id="sendmessage" value="Send" class="btn btn-primary"/>
        <input type="hidden" id="displayname" value="@Model.Prenom_N_" />
        <input type="hidden" id="senderId" value=@Model.Id />
        <input type="hidden" id="salonId" value=@Model.SalonSelectionne />

        <ul id="discussion">
        </ul>
    </div>
    @section scripts {
        <!--Script references. -->
        <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
        <!--Reference the SignalR library. -->
        <script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
        <!--Reference the autogenerated SignalR hub script. -->
        <script src="~/signalr/hubs"></script>
        <!--SignalR script to update the chat page and send messages.-->


        <script>
            $(function () {
                // Reference the auto-generated proxy for the hub.
                var chat = $.connection.chatHub;
                // Create a function that the hub can call back to display messages.
                chat.client.addNewMessageToPage = function (name, message) {
                    // Add the message to the page.
                    if (name == $('#displayname').val()) {
                        $('#discussion').append(
                            '<li class="text-success list-group-item"><strong>Vous</strong>: ' + htmlEncode(message) + '</li>'
                        );
                    } else {
                        $('#discussion').append(
                            '<li class="list-group-item" ><strong class="text-primary">' + htmlEncode(name)
                            + '</strong>: ' + htmlEncode(message) + '</li>'
                        );
                    }
                    
                };
                // Get the user name and store it to prepend to messages.
                //$('#displayname').val(prompt('Enter your name:', ''));
                // Set initial focus to message input box.
                $('#message').focus();
                // Start the connection.
                $.connection.hub.start().done(function () {
                    chat.server.joinRoom($('#salonId').val());
                    // ajout de l'envoi en appuyant sur "Entree"
                    $('#message').keyup(({ key }) => {
                        if (key === "Enter") {
                            // Call the Send method on the hub.
                            chat.server.send($('#displayname').val(), $('#message').val(), $('#salonId').val());
                            // Clear text box and reset focus for next comment.
                            $('#message').val('').focus();
                        }
                    })
                    $('#sendmessage').click(function () {

                        // Call the Send method on the hub.
                        chat.server.send($('#displayname').val(), $('#message').val(), $('#salonId').val());
                        // Clear text box and reset focus for next comment.
                        $('#message').val('').focus();
                    });
                    console.log($('#displayname').val() + $('#message').val());

                });
            });
            // This optional function html-encodes messages for display in the page.
            function htmlEncode(value) {
                var encodedValue = $('<div />').text(value).html();
                return encodedValue;
            }
        </script>

    }


    }
}
